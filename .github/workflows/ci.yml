name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: matrix.node-version == 20
        with:
          files: ./coverage/lcov.info

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build scanner
        run: npm run build || echo "Build not configured"

      - name: Install external scanners
        run: |
          # Install TruffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          # Install Semgrep
          python3 -m pip install semgrep

      - name: Run comprehensive security scan
        run: |
          mkdir -p reports
          echo "Security scan placeholder"
          echo '{}' > reports/results.json
          echo '{}' > reports/results.sarif
        continue-on-error: true

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/results.sarif

      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-reports-${{ github.sha }}
          path: reports/
          retention-days: 30

      - name: Comment PR with scan results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const results = JSON.parse(fs.readFileSync('reports/results.json', 'utf8'));
              const critical = results.findings.filter(f => f.severity === 'CRITICAL').length;
              const high = results.findings.filter(f => f.severity === 'HIGH').length;
              const medium = results.findings.filter(f => f.severity === 'MEDIUM').length;
              const low = results.findings.filter(f => f.severity === 'LOW').length;
              const suppressed = results.suppressed ? results.suppressed.length : 0;
              
              const body = `## 🔒 Security Scan Results
              
              | Severity | Count |
              |----------|-------|
              | 🔴 Critical | ${critical} |
              | 🟠 High | ${high} |
              | 🟡 Medium | ${medium} |
              | ⚪ Low | ${low} |
              | 📝 Suppressed | ${suppressed} |
              
              ${critical > 0 ? '⛔ **Critical vulnerabilities found!** Immediate action required.' : high > 0 ? '⚠️ **High severity findings detected.** Review and fix before merging.' : '✅ **No critical issues found**'}
              
              📊 **Scan Summary:**
              - Files scanned: ${results.filesScanned || 'N/A'}
              - Lines of code: ${results.linesOfCode || 'N/A'}
              - Scan duration: ${results.duration ? results.duration.toFixed(2) + 's' : 'N/A'}
              
              View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning).`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.log('Could not read scan results:', error.message);
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## 🔒 Security Scan Results\n\n❌ **Scan failed to complete.** Check the workflow logs for details.'
              });
            }
